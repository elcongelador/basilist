#NEXT
- db.nim, couch.nim: create own type for params of read procedures (now seq[(string, string)])

#TODO
- lists / couchdb: let user register different views for one list (db.nim: registerList)
- create error handling for requests querying inexistent lists
- introduce error handling for errors coming from CouchDB ([HttpRequestError] Exception message: 400 Bad Request)
can be tested with malformed json data for inserts / updates (for examples use single quotes instead of dobule quotes)
- handle update conflict (wrong _rev) from CouchDB: ([HttpRequestError] Exception message: 409 Conflict)

#TODO MAYBE
- in agent.nim for updates: change from post to put - to reflect CouchDB API

#DONE
- return id and rev we got from couch for inserts to basilist clients

#NOTES
- strange: order of functions in file db.nim (three versions of each query / insert / update / delete) is important,
with the wrong order we run into recursive calls between them

#MISSION
- basilist is a light-weight database abstraction layer, making db access convenient and hassle-free
- what it is not: an ORM (you bring your own queries - and objects if you need them)
- works with both SQL and NOSQL databases (currently: PostgreSQL, SQLite, CouchDB)
- it is able to cross-reference and populate fields among different lists (=tables in SQL lingo, documents in NOSQL stores); even different
databaes (mixing SQL and NOSQL)
- this is useful to achieve relational like querying functionality for document stores, which is otherwise cumbersome
- basic but robust caching